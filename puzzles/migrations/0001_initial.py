# Generated by Django 4.2.6 on 2023-11-04 11:18

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import puzzles.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Puzzle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='Slug used in URLs to identify this puzzle (must be unique)', max_length=255, unique=True, verbose_name='Slug')),
                ('body_template', models.CharField(blank=True, help_text='File name of a Django template (including .html) under\n        puzzle_bodies and solution_bodies containing the puzzle and\n        solution content, respectively. Defaults to slug + ".html" if not\n        specified.', max_length=255, verbose_name='Body template')),
                ('prompts_on', models.BooleanField(default=False, help_text='Does this puzzle have prompting?', verbose_name='Has prompt')),
                ('prompt', models.CharField(default='No prompt', help_text='Prompt to tell people where to go during runaround.', max_length=255, verbose_name='Prompt')),
                ('hints_on', models.BooleanField(default=True, help_text='Does this puzzle have hints?', verbose_name='Has hints')),
                ('hint_one', models.CharField(default='No hint', help_text='Hint to be unlocked at 15 minutes after the puzzle starts', max_length=255, verbose_name='First Hint')),
                ('hint_two', models.CharField(default='No hint', help_text='Hint to be unlocked at 25 minutes after the puzzle starts', max_length=255, verbose_name='Second Hint')),
                ('hint_three', models.CharField(default='No hint', help_text='Hint to be unlocked at 35 minutes after the puzzle starts', max_length=255, verbose_name='Third Hint')),
                ('novice_hints', models.BooleanField(default=False, help_text='Whether or not novice hints should be considered for this puzzle', verbose_name='Has novice hints?')),
                ('hint_one_novice', models.CharField(default='No hint', help_text='Novice hint to be unlocked at 15 minutes after the puzzle starts', max_length=255, verbose_name='First Hint')),
                ('hint_two_novice', models.CharField(default='No hint', help_text='Novice hint to be unlocked at 25 minutes after the puzzle starts', max_length=255, verbose_name='Second Hint')),
                ('hint_three_novice', models.CharField(default='No hint', help_text='Novice hint to be unlocked at 35 minutes after the puzzle starts', max_length=255, verbose_name='Third Hint')),
                ('answer', models.CharField(help_text='Answer (fine if unnormalized)', max_length=255, verbose_name='Answer')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('is_meta', models.BooleanField(default=False, verbose_name='Is meta')),
                ('unlock_hours', models.IntegerField(default=-1, help_text='If nonnegative, puzzle unlocks N hours after the hunt starts.', verbose_name='Unlock hours')),
                ('unlock_global', models.IntegerField(default=-1, help_text='If nonnegative, puzzle unlocks after N main round solves in any round.', verbose_name='Unlock global')),
                ('unlock_local', models.IntegerField(default=-1, help_text='If nonnegative, puzzle unlocks after N main round solves in this round.', verbose_name='Unlock local')),
                ('emoji', models.CharField(default=':question:', help_text='Emoji to use in Discord integrations involving this puzzle', max_length=32, verbose_name='Emoji')),
            ],
            options={
                'verbose_name': 'puzzle',
                'verbose_name_plural': 'puzzles',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(help_text='Public team name for scoreboards and communications', max_length=255, unique=True, verbose_name='Team name')),
                ('division', models.IntegerField(default=0, help_text='The division of the team, numbers less than or equal to one\n    are advanced division team members, numbers greater than one are beginner division team members.', verbose_name='Team division')),
                ('creation_time', models.DateTimeField(auto_now_add=True, verbose_name='Creation time')),
                ('start_offset', models.DurationField(default=datetime.timedelta, help_text='How much earlier this team should start, for early-testing\n        teams; be careful with this!', verbose_name='Start offset')),
                ('allow_time_unlocks', models.BooleanField(default=True, help_text='Whether this team receives time-unlocked puzzles. Note that\n        if disabled, they may be able to access more puzzles by logging out', verbose_name='Allow time unlocks')),
                ('total_hints_awarded', models.IntegerField(default=0, help_text='Number of additional hints to award the team (on top of\n        the default amount per day)', verbose_name='Total hints awarded')),
                ('total_free_answers_awarded', models.IntegerField(default=0, help_text='Number of additional free answers to award the team (on\n        top of the default amount per day)', verbose_name='Total free answers awarded')),
                ('last_solve_time', models.DateTimeField(blank=True, null=True, verbose_name='Last solve time')),
                ('finished', models.BooleanField(default=False, verbose_name='Has the user finished the problem?')),
                ('time_so_far', models.IntegerField(default=0, verbose_name='Total number of milliseconds in user solve time')),
                ('is_prerelease_testsolver', models.BooleanField(default=False, help_text='Whether this team is a prerelease testsolver. If true, the\n        team will have access to puzzles before the hunt starts', verbose_name='Is prerelease testsolver')),
                ('is_hidden', models.BooleanField(default=False, help_text='If a team is hidden, it will not be visible to the public', verbose_name='Is hidden')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'team',
                'verbose_name_plural': 'teams',
            },
        ),
        migrations.CreateModel(
            name='UnlockGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name of the unlock group')),
                ('count', models.IntegerField(verbose_name='Number of puzzles in this unlock group')),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email (optional)')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'team member',
                'verbose_name_plural': 'team members',
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_datetime', models.DateTimeField(auto_now=True, verbose_name='Submitted datetime')),
                ('fun', puzzles.models.RatingField(adjective='fun', max_rating=6)),
                ('difficulty', puzzles.models.RatingField(adjective='hard', max_rating=6)),
                ('comments', models.TextField(blank=True, verbose_name='Anything else:')),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.puzzle', verbose_name='puzzle')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'survey',
                'verbose_name_plural': 'surveys',
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('selection_stage', models.BooleanField(default=False, help_text='Used to denote whether we select novice or advanced here.', verbose_name='Selection status')),
                ('display_locked', models.BooleanField(default=True, help_text='Used to denote whether we display locked fields.', verbose_name='Locked Puzzle Visibility')),
                ('meta', models.ForeignKey(blank=True, limit_choices_to={'is_meta': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='puzzles.puzzle', verbose_name='meta')),
            ],
            options={
                'verbose_name': 'round',
                'verbose_name_plural': 'rounds',
            },
        ),
        migrations.CreateModel(
            name='PuzzleMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guess', models.CharField(max_length=255, verbose_name='Guess')),
                ('response', models.TextField(verbose_name='Response')),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.puzzle', verbose_name='puzzle')),
            ],
            options={
                'verbose_name': 'puzzle message',
                'verbose_name_plural': 'puzzle messages',
            },
        ),
        migrations.AddField(
            model_name='puzzle',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.round', verbose_name='round'),
        ),
        migrations.AddField(
            model_name='puzzle',
            name='unlock_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.unlockgroup', verbose_name='unlock group'),
        ),
        migrations.CreateModel(
            name='Preamble',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='Slug used in URLs to identify this preamble (must be unique)', max_length=255, unique=True, verbose_name='Slug')),
                ('body_template', models.CharField(blank=True, help_text='File name of a Django template (including .html) under\n        puzzle_bodies and solution_bodies containing the puzzle and\n        solution content, respectively. Defaults to slug + ".html" if not\n        specified.', max_length=255, verbose_name='Body template')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('unlock_hours', models.IntegerField(default=-1, help_text='If nonnegative, puzzle unlocks N hours after the hunt starts.', verbose_name='Unlock hours')),
                ('unlock_global', models.IntegerField(default=-1, help_text='If nonnegative, puzzle unlocks after N main round solves in any round.', verbose_name='Unlock global')),
                ('emoji', models.CharField(default=':question:', help_text='Emoji to use in Discord integrations involving this puzzle', max_length=32, verbose_name='Emoji')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.round', verbose_name='round')),
            ],
            options={
                'verbose_name': 'preamble',
                'verbose_name_plural': 'preambles',
            },
        ),
        migrations.CreateModel(
            name='IntermediateConfirmation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_text', models.CharField(max_length=255, verbose_name='Input text')),
                ('feedback_text', models.CharField(max_length=255, verbose_name='Feedback')),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.puzzle', verbose_name='puzzle')),
            ],
        ),
        migrations.CreateModel(
            name='Hint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_followup', models.BooleanField(default=False, verbose_name='Is followup')),
                ('submitted_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Submitted datetime')),
                ('hint_question', models.TextField(verbose_name='Hint question')),
                ('notify_emails', models.CharField(default='none', max_length=255, verbose_name='Notify emails')),
                ('claimed_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Claimed datetime')),
                ('claimer', models.CharField(blank=True, max_length=255, verbose_name='Claimer')),
                ('discord_id', models.CharField(blank=True, max_length=255, verbose_name='Discord id')),
                ('answered_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Answered datetime')),
                ('status', models.CharField(choices=[('NR', 'No response'), ('ANS', 'Answered'), ('REF', 'Refunded'), ('OBS', 'Obsolete')], default='NR', max_length=3, verbose_name='Status')),
                ('response', models.TextField(blank=True, verbose_name='Response')),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.puzzle', verbose_name='puzzle')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'hint',
                'verbose_name_plural': 'hints',
            },
        ),
        migrations.CreateModel(
            name='Erratum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updates_text', models.TextField(blank=True, help_text='\n        Text to show on the Updates (errata) page. If blank, it will not appear there.\n        Use $PUZZLE to refer to the puzzle. The text will be prefixed with "On\n        (date)," when displayed, so you should capitalize it the way it would\n        appear mid-sentence. HTML is ok.\n    ', verbose_name='Updates text')),
                ('puzzle_text', models.TextField(blank=True, help_text='\n        Text to show on the puzzle page. If blank, it will not appear there.\n        The text will be prefixed with "On (date)," when displayed, so you\n        should capitalize it the way it would appear mid-sentence. HTML is ok.\n    ', verbose_name='Puzzle text')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Timestamp')),
                ('published', models.BooleanField(default=False, verbose_name='Published')),
                ('puzzle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='puzzles.puzzle', verbose_name='puzzle')),
            ],
            options={
                'verbose_name': 'erratum',
                'verbose_name_plural': 'errata',
            },
        ),
        migrations.CreateModel(
            name='PuzzleUnlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlock_datetime', models.DateTimeField(verbose_name='Unlock datetime')),
                ('view_datetime', models.DateTimeField(blank=True, null=True, verbose_name='View datetime')),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.puzzle', verbose_name='puzzle')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'puzzle unlock',
                'verbose_name_plural': 'puzzle unlocks',
                'unique_together': {('team', 'puzzle')},
            },
        ),
        migrations.CreateModel(
            name='PuzzleFirstViewTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solve_count', models.IntegerField(default=0, verbose_name='Count of puzzles solved in the solve group')),
                ('first_view_time', models.DateTimeField(verbose_name='First view by team datetime')),
                ('fullsolve_time', models.DateTimeField(null=True, verbose_name='Time all puzzles in the unlock group are solved')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.team', verbose_name='team')),
                ('unlock_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.unlockgroup', verbose_name='unlock group')),
            ],
            options={
                'verbose_name': 'team unlock group time',
                'verbose_name_plural': 'team unlock group times',
                'unique_together': {('team', 'unlock_group')},
            },
        ),
        migrations.CreateModel(
            name='PreambleUnlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlock_datetime', models.DateTimeField(verbose_name='Unlock datetime')),
                ('view_datetime', models.DateTimeField(blank=True, null=True, verbose_name='View datetime')),
                ('preamble', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.preamble', verbose_name='preamble')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'preamble unlock',
                'verbose_name_plural': 'preamble unlocks',
                'unique_together': {('team', 'preamble')},
            },
        ),
        migrations.CreateModel(
            name='PreambleCompletion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Submitted datetime')),
                ('preamble', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.preamble', verbose_name='preamble')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'preamble completion',
                'verbose_name_plural': 'preamble completions',
                'unique_together': {('team', 'preamble')},
            },
        ),
        migrations.CreateModel(
            name='ExtraGuessGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_guesses', models.IntegerField(verbose_name='Extra guesses')),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.puzzle', verbose_name='puzzle')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'extra guess grant',
                'verbose_name_plural': 'extra guess grants',
                'unique_together': {('team', 'puzzle')},
            },
        ),
        migrations.CreateModel(
            name='AnswerSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_answer', models.CharField(max_length=255, verbose_name='Submitted answer')),
                ('is_correct', models.BooleanField(verbose_name='Is correct')),
                ('submitted_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Submitted datetime')),
                ('used_free_answer', models.BooleanField(verbose_name='Used free answer')),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.puzzle', verbose_name='puzzle')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'answer submission',
                'verbose_name_plural': 'answer submissions',
                'unique_together': {('team', 'puzzle', 'submitted_answer')},
            },
        ),
    ]
